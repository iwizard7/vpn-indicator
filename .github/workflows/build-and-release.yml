name: Build and Release VPN Indicator

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '5.9'

    - name: Cache Swift dependencies
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-swift-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-

    - name: Build application
      run: |
        echo "Building VPN Indicator..."
        export CI=true
        export GITHUB_ACTIONS=true
        swift build --configuration release

        # Verify build artifacts
        if [ -f ".build/release/VPNIndicator" ]; then
          echo "‚úÖ Build successful - executable found"
          ls -la .build/release/VPNIndicator
        else
          echo "‚ùå Build failed - executable not found"
          exit 1
        fi

    - name: Create application bundle
      run: |
        echo "Creating application bundle..."

        # Create app bundle structure
        mkdir -p "VPN Indicator.app/Contents/MacOS"
        mkdir -p "VPN Indicator.app/Contents/Resources"

        # Copy executable
        cp .build/release/VPNIndicator "VPN Indicator.app/Contents/MacOS/"

        # Create Info.plist
        cat > "VPN Indicator.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>VPNIndicator</string>
            <key>CFBundleIdentifier</key>
            <string>com.vpnindicator.app</string>
            <key>CFBundleName</key>
            <string>VPN Indicator</string>
            <key>CFBundleVersion</key>
            <string>${{ github.run_number }}</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0.${{ github.run_number }}</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

        # Make executable
        chmod +x "VPN Indicator.app/Contents/MacOS/VPNIndicator"

        echo "Application bundle created successfully"

    - name: Generate version info
      id: version
      run: |
        # Generate version based on current date and time
        VERSION_DATE=$(date +"%Y%m%d")
        VERSION_TIME=$(date +"%H%M%S")
        VERSION="1.0.${VERSION_DATE}.${VERSION_TIME}"
        SHORT_VERSION="${VERSION_DATE}-${VERSION_TIME}"

        echo "Full version: $VERSION"
        echo "Short version: $SHORT_VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "short_version=$SHORT_VERSION" >> $GITHUB_OUTPUT

    - name: Create ZIP archive
      run: |
        echo "Creating ZIP archive..."
        zip -r "VPN-Indicator-${{ steps.version.outputs.short_version }}.zip" "VPN Indicator.app"
        echo "Archive created: VPN-Indicator-${{ steps.version.outputs.short_version }}.zip"

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: VPN Indicator v${{ steps.version.outputs.version }}
        body: |
          ## üöÄ Automatic Release

          **Version:** ${{ steps.version.outputs.version }}
          **Build Date:** $(date +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}

          ### üì¶ What's included:
          - ‚úÖ Complete VPN Indicator application
          - ‚úÖ Status bar integration
          - ‚úÖ Multiple VPN client support
          - ‚úÖ Customizable themes and notifications
          - ‚úÖ Auto-start functionality

          ### üñ•Ô∏è System Requirements:
          - macOS 12.0 or later
          - Intel or Apple Silicon

          ### üìã Installation:
          1. Download `VPN-Indicator-${{ steps.version.outputs.short_version }}.zip`
          2. Unzip the archive
          3. Move `VPN Indicator.app` to Applications folder
          4. Launch the application

          ---
          *This release was automatically built and published by GitHub Actions*
        draft: false
        prerelease: false
        files: ./VPN-Indicator-${{ steps.version.outputs.short_version }}.zip

    - name: Update README with latest version
      run: |
        # Update version badge in README
        sed -i '' "s/badge\/version-[0-9]\+\.[0-9]\+\.[0-9]\+/badge\/version-${{ steps.version.outputs.version }}/g" README.md

        # Commit the updated README
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update version badge to ${{ steps.version.outputs.version }}" || echo "No changes to commit"

        # Push the updated README
        git push origin main || echo "Failed to push README update"

    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ Build and release completed successfully!"
        echo "üì¶ Release created: v${{ steps.version.outputs.version }}"
        echo "üîó Download: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"